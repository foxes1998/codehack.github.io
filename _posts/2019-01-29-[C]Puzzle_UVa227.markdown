---
layout: post
title:  "[C]Puzzle_UVa227"
date:   2019-01-29 19:00:00 +0800
categories:	[UVa]
tags:	[UVa, UVa227, Puzzle, 算法]
---
此题来自 UVa(UVa Online Judge, 西班牙Valladolid大学的Online Judge。是最古老也是全世界最知名的Online Judge)，题号为 UVa227 ，同时也是*刘汝佳*大佬在《算法入门》所给的第三章练习题之一。

[原题目链接(英文)][原题目链接(英文)]

[题目原文档(英文)][题目原文档(英文)]
### 题目描述(中文翻译)：
> 30年前流行的儿童拼图游戏由一个5×5的框架组成的，其中包含24个相同大小的小方块。 每个小正方形上都印有一个独特的字母。 由于框架内只有24个正方形，因此框架还包含一个与小正方形大小相同的空位置。 如果正方形位于空位置的右侧，左侧，上方或下方，则可将方形移动到该空位置。 拼图的目的是将方块滑动到空位置，以便框架按字母顺序显示字母。

> 例图显示了一个拼图的原始布局和在以下6个移动顺序之后的布局：
>
>> 1) 空格上方的方块移动
>
>> 2) 空格右侧的方块移动
>
>> 3) 空格右侧的方块移动
>
>> 4) 空格下方的方块移动
>
>> 5) 空格下方的方块移动
>
>> 6) 空格左侧的方块移动
>
> ![示例图片]({{ site.baseurl }}/includes/UVa/201-300/example.png)

> 编写一个程序来显示给定初始布局和移动顺序的结果帧。

### 输入规则
> 程序的输入由几个拼图题组成。每一个都是由它的初始布局和在拼图上的移动顺序来描述的。每个拼图描述的前5行是初始布局。后面的几行给出了移动的顺序。
>
>  帧显示的第一行与拼图中的方格顶行相对应。其他行按顺序排列。框架中的空位置用空格表示。每一显示行正好包含5个字符，从最左边的方块上的字符开始（如果最左边的方块实际上是空的帧位置，则为空白）。显示行将对应于合法的拼图。
>
>  移动顺序由一系列的 A 、B 、R 和 L 表示，以表示哪个方块移动到空位置。A 表示空位上方的方块移动；B 表示空位下方的方块移动；L 表示空位左侧的方块移动；R 表示空位右侧的方块移动。可能存在非法移动，即使它由4个移动字符之一表示。如果发生了非法移动，则认为拼图没有最终布局。这一移动顺序可以分布在多行上，但始终以数字0结尾。数据的结尾由字符Z表示。

### 输出规则
> 每个拼图的输出从一个适当标记的数字开始（Puzzle #1、Puzzle #2等）。如果拼图没有最终的布局，那么应该在其后输出一条这样的提示信息。否则，应显示最终布局。
>
>  为最终布局的输出格式化每行以便阅读，使在两个相邻字母之间有一个空白字符。把空正方形当作字母。例如，如果空白是一个内部位置，那么它将出现为3个空白序列-一个将它与左边正方形分隔，一个用于空位置本身，一个将它与右边正方形分离。
>
>  用一个空行将不同拼图记录的输出分开。
>
> __注__ ：样本输入的第一个记录对应于上面所示的拼图。

### 输入示例
<pre>
TRGSJ
XDOKI
M VLN
WPABE
UQHCF
ARRBBL0
ABCDE
FGHIJ
KLMNO
PQRS 
TUVWX
AAA
LLLL0
ABCDE
FGHIJ
KLMNO
PQRS 
TUVWX
AAAAABBRRRLL0
Z
</pre>

### 示例输出
<pre>
Puzzle #1: 
T R G S J
X O K L I
M D V B N
W P   A E
U Q H C F

Puzzle #2:
  A B C D
F G H I E
K L M N J
P Q R S O
T U V W X

Puzzle #3:
This puzzle has no final configuration.
</pre>


{% highlight c linenos %}
#include<stdio.h>
#include<string.h>
#define maxn1 100
#define maxn2 10000+10

int mv_Puzzle(char a[5][5],char *b){
    int t=0,x,y,flag2=1;
    for(x=0  ;x<5 && flag2  ;x++){
        for(y=0  ;y<5 && flag2  ;y++){
            if(a[x][y] == ' ')
                flag2=0;
        }
    }
    flag2=1;
    x--;
    y--;
    // printf("x=%d ,y=%d ,s[x][y]=\'%c\'\n",x,y,a[x][y]);
    while(b[t]!='0'&&flag2){
        if(b[t]=='A'||b[t]=='B'||b[t]=='L'||b[t]=='R'){
            if(b[t]=='A'){
                if(x-1<0){
                    flag2=0;
                }else{
                    a[x][y] = a[x-1][y];
                    a[x-1][y] = ' ';
                    x--;
                }
            }
            if(b[t]=='B'){
                if(x+1>5){
                    flag2=0;
                }else{
                    a[x][y] = a[x+1][y];
                    a[x+1][y] = ' ';
                    x++;
                }
            }
            if(b[t]=='L'){
                if(y-1<0){
                    flag2=0;
                }else{
                    a[x][y] = a[x][y-1];
                    a[x][y-1] = ' ';
                    y--;
                }
            }
            if(b[t]=='R'){
                if(y+1>5){
                    flag2=0;
                }else{
                    a[x][y] = a[1][y+1];
                    a[x][y+1] = ' ';
                    y++;
                }
            }
            t++;
        } else
        {
            flag2=0;
        }
        
    }
    return flag2;
}
void Print_Puzzle(char a[5][5]){
    for(int i=0;i<5;i++){
        for(int j=0;j<5;j++){
            if(j<4){
                printf("%c ",a[i][j]);
            } else
                printf("%c\n",a[i][j]);
        }
    }
}
void Puzzle(){
    int flag1=1,kase=0,m=0,p=0;
    char s[maxn2]={'\0};
    while(1){
        char tmp[maxn1];
        scanf("%[^\n]%*c",tmp);
        int len=strlen(tmp);
        memcpy(&s[m],tmp,len);
        m=m+len;
        if(s[m-1]=='Z') 
            break;
    }
    // printf("%s\n\n",s);
    while(flag1){
        char a[5][5]={'\0'},b[maxn1]={'\0'};
        for(int i=0;i<5&&flag1;i++){
            for(int j=0;j<5&&flag1;j++){
                a[i][j]=s[p++];
                if(a[0][0]=='Z'){
                    flag1 = 0;
                }
            }
        }
        if(!flag1)   break;
        int t=-1;
        do
        {
            b[++t]=s[p++];
        } while (b[t]!='0');
        // printf("\n%s\n\n",b);
        if(kase) 
            printf("\n");
        printf("Puzzle #%d:\n",++kase);
        if(mv_Puzzle(a,b)){
            Print_Puzzle(a);
        } else 
            printf("This puzzle has no final configuration.\n");
    }
}

int main(){
    Puzzle();
    return 0;
}
{% endhighlight %}

## 代码解释
### 主函数（main函数）：
直接调用 Puzzle 函数（也可以选择将 Puzzle 函数的所有内容复制到main 函数中）
### Puzzle() 函数：
{% highlight c linenos %}
    while(1){
        char tmp[maxn1];
        scanf("%[^\n]%*c",tmp);
        int len=strlen(tmp);
        memcpy(&s[m],tmp,len);
        m=m+len;
        if(s[m-1]=='Z') 
            break;
    }
{% endhighlight %}

此段为读取所有输入，将其存入字符数组 s （过滤掉换行符），其中用 tmp 字符数组读取每行内容，再加入数组 s 。其中` scanf("%[^\n]%*c",tmp); ` 效果等价于` gets(); ` ，仅作知识补充【如欲继续了解可阅读底部[参考文献](#links)】。若输入为上面的 示例 输入，则输出 s 为： `TRGSJXDOKIM VLNWPABEUQHCFARRBBL0ABCDEFGHIJKLMNOPQRS TUVWXAAALLLL0ABCDEFGHIJKLMNOPQRS TUVWXAAAAABBRRRLL0Z` 。

{% highlight c linenos %}
        for(int i=0;i<5 && flag1;i++){
            for(int j=0;j<5 && flag1;j++){
                a[i][j]=s[p++];
                if(a[0][0]=='Z'){
                    flag1 = 0;
                }
            }
        }
        if(!flag1)   break;
{% endhighlight %}
在接下来的永久循环中，先从数组 s 循环读取数据存入数组 a ，并检查数组第一个元素是否为结束标志 'Z' ，如果是则退出(多个)循环，就退出了程序；否则数组 a 存入的则为 5*5 的 Puzzle 数据。

{% highlight c linenos %}
        int t=-1;
        do
        {
            b[++t]=s[p++];
        } while (b[t]!='0');
{% endhighlight %}
此处为将对 Puzzle 的操作序列存入 b 数组。每存入一个数据，检查其是否为 '0' ，是则停止存入。

{% highlight c linenos %}
        int kase=0;

        ......

        if(kase) 
            printf("\n");
        printf("Puzzle #%d:\n",++kase);
{% endhighlight %}
初始设置` kase=0 `，用于统计 Puzzle 的组数，上面片段的第五行获取当前已输出的组数，如果为 0 则不输出换行否则输出换行【题目要求两个数据组中间需要空行】。接下来输出提示语` printf("Puzzle #%d:\n",++kase); `，这里等价于` { kase = kase +1 ;printf("Puzzle #%d:\n",kase);} `。

{% highlight c linenos %}
        if(mv_Puzzle(a,b)){
            Print_Puzzle(a);
        } else 
            printf("This puzzle has no final configuration.\n");
{% endhighlight %}
接下来调用` mv_Puzzle(char a[5][5],char *b) `对数组 a(Puzzle) 的中的空格按照 b 的指令序列进行操作，如果遇到非法操作则返回 0 ，否则返回 1 ；如果返回 1 ，则调用` Print_Puzzle(); `输出经过操作序列后的 Puzzle ，否则输出无最终布局的提示` This puzzle has no final configuration.\n `。

### mv_Puzzle() 函数
{% highlight c linenos %}
    for(x=0  ;x<5 && flag2  ;x++){
        for(y=0  ;y<5 && flag2  ;y++){
            if(a[x][y] == ' ')
                flag2=0;
        }
    }
    flag2=1;
    x--;
    y--;
{% endhighlight %}
此处在 Puzzle 中寻找出空格数据所在坐标。为什么在最后还要进行` x--;y--; `呢？因为 `for` 语句的执行顺序为：
> 1. 初始化(此处为执行 `x=0;` )
>
> 2. 判断是否满足循环条件(此处为判断 `x<5 && flag2;` 的结果)
>
> 3. 执行循环体(为大括号中内容)
>
> 4. 执行增值变化(此处为 `x++`)
>
> 5. 判断是否满足循环条件(此处为判断 `x<5 && flag2;` 的结果)
>
> 6. 执行循环体(为大括号中内容)
>
> 7. 执行增值变化(此处为 `x++`)
>
> 9. ...

相信大家已经知道原因了：由于我设置的跳出循环的方法为将标志符改变，则会在标志符改变后先将 x与y 的值增加1，再去判断循环条件，所以退出后需要将增加的值减去。当然你可以进行优化【相信你有方法了】。

{% highlight c linenos %}
    while(b[t]!='0'&&flag2){
        if(b[t]=='A'||b[t]=='B'||b[t]=='L'||b[t]=='R'){
            if(b[t]=='A'){
                if(x-1<0){
                    flag2=0;
                }else{
                    a[x][y] = a[x-1][y];
                    a[x-1][y] = ' ';
                    x--;
                }
            }

        ......

            t++;
        } else
        {
            flag2=0;
        }
        
    }
{% endhighlight %}
此循环中将对 Puzzle 中的空格进行移动。循环条件为当前操作指令不为 '0' 且标志符不为 0 ；接下来判断指令是否为 'A'、'B'、'L'或'R'中的，否则为非法指令，若为非法指令则标志符为 0 ；否则继续根据指令进行判断，如果不符合移动条件，即移动会越界，则标记为非法移动，将标志符改为 0 ；否则进行移动操作：` a[x][y] = a[x-1][y];a[x-1][y] = ' ';x--; `。
当循环结束后返回标志符。

### Print_Puzzle() 函数
{% highlight c linenos %}
void Print_Puzzle(char a[5][5]){
    for(int i=0;i<5;i++){
        for(int j=0;j<5;j++){
            if(j<4){
                printf("%c ",a[i][j]);
            } else
                printf("%c\n",a[i][j]);
        }
    }
}
{% endhighlight %}
将 Puzzle 内容输出。每行中每两个 Puzzle 字符间要空格间隔，末尾不能有空格，故在每行前4个后带空格，最后一个带换行。

讲解结束。

每文一言：
<figure>
	<img src="{{ site.baseurl }}/assets/space.jpg" alt="image">
	<figcaption>
		Don't aim for success if you want it; just do what you love and believe in, and it will come naturally.<br/>
		如果你想要成功，不要去追求成功；尽管做你自己热爱的事情并且相信它，成功自然到来。
	</figcaption>
</figure>

<h4 id="links">参考文献(部分链接需要科學上網):</h4>
1. [scanf读取含空格的字符串](https://blog.csdn.net/chuhe163/article/details/81048751)
2. [维基百科：格式化字符串](https://zh.wikipedia.org/wiki/格式化字符串)
3. [维基百科：正则表达式](https://zh.wikipedia.org/wiki/正则表达式)

* * *
* * *
<br/>
* * *
更新于2019-02-02 23:20
* * *
添加上了我自己的代码，预计明日会加上比较完整的思路解析
<br/>
<br/>
* * *
更新于2019-02-05 18:35
* * *
抱歉，各位，由于过年较忙，没时间编辑博文，所以推到今日更新代码解析，另外说明以后我将渐渐地减少篇幅写代码解析，最后转为概括性的表述代码思路。
<br/>
* * *
* * *

如有问题或者对代码有更好的改进建议可在底部通过邮箱直接联系我。乐意收到来信。

<a href="mailto:feather@codehack.life?subject=[re]{{page.title}}&body=Article_url:  {{ site.url }}{{ page.url }} ">feather@codehack.life</a>

[原题目链接(英文)]: https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=4&page=show_problem&problem=163
[题目原文档(英文)]: https://u19417164.ctfile.com/fs/19417164-334684267